rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {
    
    // ========================================
    // FONCTIONS UTILITAIRES
    // ========================================
    
    // Vérifier si l'utilisateur est authentifié
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Vérifier si l'utilisateur est admin
    function isAdmin() {
      return request.auth != null && 
             request.auth.token.role == 'admin';
    }
    
    // Vérifier si l'email est vérifié
    function isEmailVerified() {
      return request.auth != null && 
             request.auth.token.email_verified == true;
    }
    
    // Vérifier la taille du fichier (max 10MB)
    function isValidFileSize() {
      return request.resource.size < 10 * 1024 * 1024;
    }
    
    // Vérifier le type de fichier image
    function isValidImageType() {
      return request.resource.contentType.matches('image/.*');
    }
    
    // Vérifier le type de fichier document
    function isValidDocumentType() {
      return request.resource.contentType in [
        'application/pdf',
        'image/jpeg',
        'image/png',
        'image/webp',
        'application/msword',
        'application/vnd.openxmlformats-officedocument.wordprocessingml.document'
      ];
    }
    
    // ========================================
    // PHOTOS DE PROFIL
    // ========================================
    match /profilePhotos/{userId}/{fileName} {
      // Lecture : propriétaire, admin, ou profils publics
      allow read: if isAuthenticated() && 
                    (request.auth.uid == userId || 
                     isAdmin());
      
      // Écriture : propriétaire uniquement avec validation
      allow write: if isAuthenticated() && 
                     isEmailVerified() &&
                     request.auth.uid == userId &&
                     isValidImageType() &&
                     isValidFileSize();
      
      // Suppression : propriétaire ou admin
      allow delete: if isAuthenticated() && 
                      (request.auth.uid == userId || 
                       isAdmin());
    }
    
    // ========================================
    // DOCUMENTS UTILISATEURS
    // ========================================
    match /documents/{userId}/{fileName} {
      // Lecture : propriétaire ou admin
      allow read: if isAuthenticated() && 
                    (request.auth.uid == userId || 
                     isAdmin());
      
      // Écriture : propriétaire avec validation
      allow write: if isAuthenticated() && 
                     isEmailVerified() &&
                     request.auth.uid == userId &&
                     isValidDocumentType() &&
                     isValidFileSize();
      
      // Suppression : propriétaire ou admin
      allow delete: if isAuthenticated() && 
                      (request.auth.uid == userId || 
                       isAdmin());
    }
    
    // ========================================
    // DOSSIER TEMPORAIRE (INSCRIPTION)
    // ========================================
    match /temp_profiles/{fileName} {
      // Accès temporaire pour l'inscription (24h max)
      allow read, write: if isAuthenticated() && 
                           isValidImageType() &&
                           isValidFileSize();
      
      // Nettoyage admin
      allow delete: if isAdmin();
    }
    
    // ========================================
    // FACTURES ET DOCUMENTS ADMINISTRATIFS
    // ========================================
    match /invoices/{userId}/{fileName} {
      // Lecture : propriétaire ou admin
      allow read: if isAuthenticated() && 
                    (request.auth.uid == userId || 
                     isAdmin());
      
      // Écriture : admin uniquement
      allow write: if isAdmin();
    }
    
    // ========================================
    // SAUVEGARDES SYSTÈME
    // ========================================
    match /backups/{fileName} {
      // Admin uniquement
      allow read, write: if isAdmin();
    }
    
    // ========================================
    // RÈGLE PAR DÉFAUT - TOUT REFUSER
    // ========================================
    match /{allPaths=**} {
      allow read, write: if false;
    }
  }
}