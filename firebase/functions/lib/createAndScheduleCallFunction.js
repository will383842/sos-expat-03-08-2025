"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createAndScheduleCallHTTPS = void 0;
const https_1 = require("firebase-functions/v2/https");
const callScheduler_1 = require("./callScheduler");
const logError_1 = require("./utils/logs/logError");
/**
 * üîß Cloud Function CORRIG√âE pour cr√©er et programmer un appel
 */
exports.createAndScheduleCallHTTPS = (0, https_1.onCall)({
    // ‚úÖ Configuration CORS
    cors: [
        /localhost:\d+/,
        /127\.0\.0\.1:\d+/,
        /firebase\.com$/,
    ],
}, async (request) => {
    var _a;
    const requestId = `call_${Date.now()}_${Math.random().toString(36).substring(2, 7)}`;
    try {
        // ========================================
        // 1. VALIDATION DE L'AUTHENTIFICATION
        // ========================================
        if (!request.auth) {
            throw new https_1.HttpsError('unauthenticated', 'Authentification requise pour cr√©er un appel.');
        }
        const userId = request.auth.uid;
        // ========================================
        // 2. VALIDATION DES DONN√âES
        // ========================================
        const { providerId, clientId, providerPhone, clientPhone, serviceType, providerType, paymentIntentId, amount, // üîß FIX: EN EUROS
        delayMinutes = 5, clientLanguages, providerLanguages } = request.data;
        // üîß FIX: Debug des donn√©es re√ßues
        console.log('üìû === CREATE AND SCHEDULE CALL - DONN√âES RE√áUES ===');
        console.log('üí∞ Montant re√ßu:', {
            amount,
            type: typeof amount,
            amountInEuros: amount,
            serviceType,
            providerType
        });
        // V√©rification des champs obligatoires
        if (!providerId || !clientId || !providerPhone || !clientPhone ||
            !serviceType || !providerType || !paymentIntentId || !amount) {
            throw new https_1.HttpsError('invalid-argument', 'Donn√©es requises manquantes pour cr√©er l\'appel.');
        }
        // ========================================
        // 3. VALIDATION DES PERMISSIONS
        // ========================================
        if (userId !== clientId) {
            throw new https_1.HttpsError('permission-denied', 'Vous ne pouvez cr√©er un appel que pour votre propre compte.');
        }
        // ========================================
        // 4. VALIDATION DES TYPES DE SERVICE
        // ========================================
        const allowedServiceTypes = ['lawyer_call', 'expat_call'];
        const allowedProviderTypes = ['lawyer', 'expat'];
        if (!allowedServiceTypes.includes(serviceType)) {
            throw new https_1.HttpsError('invalid-argument', `Type de service invalide. Types autoris√©s: ${allowedServiceTypes.join(', ')}`);
        }
        if (!allowedProviderTypes.includes(providerType)) {
            throw new https_1.HttpsError('invalid-argument', `Type de prestataire invalide. Types autoris√©s: ${allowedProviderTypes.join(', ')}`);
        }
        // ========================================
        // 5. üîß FIX: VALIDATION DES MONTANTS EN EUROS
        // ========================================
        if (typeof amount !== 'number' || isNaN(amount) || amount <= 0) {
            throw new https_1.HttpsError('invalid-argument', `Montant invalide: ${amount} (type: ${typeof amount})`);
        }
        if (amount > 500) { // Max 500‚Ç¨
            throw new https_1.HttpsError('invalid-argument', 'Montant maximum de 500‚Ç¨ d√©pass√©.');
        }
        if (amount < 5) { // 5‚Ç¨ minimum
            throw new https_1.HttpsError('invalid-argument', 'Montant minimum de 5‚Ç¨ requis.');
        }
        // üîß FIX: Validation coh√©rence montant/service EN EUROS
        const expectedAmountEuros = serviceType === 'lawyer_call' ? 49 : 19;
        const tolerance = 5; // 5‚Ç¨ de tol√©rance
        if (Math.abs(amount - expectedAmountEuros) > tolerance) {
            console.warn(`‚ö†Ô∏è Montant inhabituel: re√ßu ${amount}‚Ç¨, attendu ${expectedAmountEuros}‚Ç¨ pour ${serviceType}`);
            // Ne pas bloquer mais logger pour audit
        }
        // ========================================
        // 6. VALIDATION DES NUM√âROS DE T√âL√âPHONE
        // ========================================
        const phoneRegex = /^\+[1-9]\d{8,14}$/;
        if (!phoneRegex.test(providerPhone)) {
            throw new https_1.HttpsError('invalid-argument', 'Num√©ro de t√©l√©phone prestataire invalide. Format requis: +33XXXXXXXXX');
        }
        if (!phoneRegex.test(clientPhone)) {
            throw new https_1.HttpsError('invalid-argument', 'Num√©ro de t√©l√©phone client invalide. Format requis: +33XXXXXXXXX');
        }
        if (providerPhone === clientPhone) {
            throw new https_1.HttpsError('invalid-argument', 'Les num√©ros du prestataire et du client doivent √™tre diff√©rents.');
        }
        // ========================================
        // 7. VALIDATION DU D√âLAI
        // ========================================
        const validDelayMinutes = Math.min(Math.max(delayMinutes, 0), 10); // Entre 0 et 10 minutes
        // ========================================
        // 8. CR√âATION ET PLANIFICATION DE L'APPEL
        // ========================================
        console.log(`[${requestId}] Cr√©ation appel - Client: ${clientId}, Provider: ${providerId}`);
        console.log(`[${requestId}] Montant: ${amount}‚Ç¨ pour ${serviceType}`);
        console.log(`[${requestId}] Service: ${serviceType}, Provider: ${providerType}`);
        console.log(`[${requestId}] D√©lai: ${validDelayMinutes} minutes`);
        // üîß FIX: Le callScheduler re√ßoit maintenant des EUROS et convertit en centimes si n√©cessaire
        const callSession = await (0, callScheduler_1.createAndScheduleCall)({
            providerId,
            clientId,
            providerPhone,
            clientPhone,
            serviceType,
            providerType,
            paymentIntentId,
            amount, // üîß FIX: EN EUROS (callScheduler g√®re la conversion si n√©cessaire)
            delayMinutes: validDelayMinutes,
            requestId,
            clientLanguages: clientLanguages || ['fr'],
            providerLanguages: providerLanguages || ['fr']
        });
        console.log(`[${requestId}] Appel cr√©√© avec succ√®s - Session: ${callSession.id}`);
        // ========================================
        // 9. R√âPONSE DE SUCC√àS
        // ========================================
        return {
            success: true,
            sessionId: callSession.id,
            status: callSession.status,
            scheduledFor: new Date(Date.now() + (validDelayMinutes * 60 * 1000)).toISOString(),
            message: `Appel programm√© dans ${validDelayMinutes} minutes`,
            amount: amount, // üîß FIX: Retourner en euros pour l'affichage
            serviceType,
            providerType,
            requestId,
            paymentIntentId
        };
    }
    catch (error) {
        // ========================================
        // 10. GESTION D'ERREURS
        // ========================================
        await (0, logError_1.logError)('createAndScheduleCallFunction:error', {
            requestId,
            error: error instanceof Error ? error.message : 'Unknown error',
            stack: error instanceof Error ? error.stack : undefined,
            requestData: {
                providerId: request.data.providerId,
                serviceType: request.data.serviceType,
                amount: request.data.amount,
                amountType: typeof request.data.amount,
                hasAuth: !!request.auth
            },
            userAuth: ((_a = request.auth) === null || _a === void 0 ? void 0 : _a.uid) || 'not-authenticated',
            timestamp: new Date().toISOString()
        });
        // Si c'est d√©j√† une HttpsError, la relancer telle quelle
        if (error instanceof https_1.HttpsError) {
            throw error;
        }
        // Pour toute autre erreur, r√©ponse g√©n√©rique s√©curis√©e
        throw new https_1.HttpsError('internal', 'Erreur lors de la cr√©ation de l\'appel. Veuillez r√©essayer.');
    }
});
//# sourceMappingURL=createAndScheduleCallFunction.js.map