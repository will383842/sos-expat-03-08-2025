// firebase/functions/src/services/twilioCallManagerAdapter.ts - VERSION CORRIG√âE SANS R√âF√âRENCES CIRCULAIRES
import { getFirestore } from "firebase-admin/firestore";
import { logError } from "../utils/logs/logError";
import { logCallRecord } from "../utils/logs/logCallRecord";

/**
 * ‚úÖ Fonction principale pour ex√©cuter un appel via Cloud Tasks
 * Cette fonction utilise directement TwilioCallManager sans d√©pendances circulaires
 */
export async function beginOutboundCallForSession(callSessionId: string) {
  try {
    console.log(`üöÄ [Adapter] D√©marrage appel pour session: ${callSessionId}`);
    
    const db = getFirestore();

    // ‚úÖ √âTAPE 1: V√©rifier que la session existe (collection standardis√©e)
    const sessionDoc = await db.collection("call_sessions").doc(callSessionId).get();
    
    if (!sessionDoc.exists) {
      console.error(`‚ùå [Adapter] Session ${callSessionId} introuvable`);
      throw new Error(`Session ${callSessionId} introuvable dans call_sessions`);
    }

    const sessionData = sessionDoc.data();
    console.log(`‚úÖ [Adapter] Session trouv√©e, status: ${sessionData?.status}`);

    // ‚úÖ √âTAPE 2: V√©rifier le paiement avant de continuer
    const paymentStatus = sessionData?.payment?.status;
    if (paymentStatus && paymentStatus !== "authorized") {
      console.error(`‚ùå [Adapter] Paiement non autoris√© (status=${paymentStatus})`);
      throw new Error(`Paiement non autoris√© pour session ${callSessionId} (status=${paymentStatus})`);
    }

    // ‚úÖ √âTAPE 3: Utiliser l'API CORRECTE du TwilioCallManager
    console.log(`üìû [Adapter] Importation TwilioCallManager...`);
    const { TwilioCallManager } = await import("../TwilioCallManager");
    
    console.log(`üìû [Adapter] D√©clenchement de la s√©quence d'appel...`);
    const result = await TwilioCallManager.startOutboundCall({
      sessionId: callSessionId,
      delayMinutes: 0  // Imm√©diat car d√©j√† programm√© par Cloud Tasks
    });

    console.log(`‚úÖ [Adapter] Appel initi√© avec succ√®s:`, {
      sessionId: callSessionId,
      status: result?.status || 'unknown'
    });

    // ‚úÖ √âTAPE 4: Logger le succ√®s
    await logCallRecord({
      callId: callSessionId,
      status: 'cloud_task_executed_successfully',
      retryCount: 0,
      additionalData: {
        adaptedVia: 'beginOutboundCallForSession',
        resultStatus: result?.status || 'unknown'
      }
    });

    return result;

  } catch (error) {
    console.error(`‚ùå [Adapter] Erreur lors de l'ex√©cution pour ${callSessionId}:`, error);
    
    // Logger l'erreur
    await logError(`twilioCallManagerAdapter:beginOutboundCallForSession`, error);
    
    await logCallRecord({
      callId: callSessionId,
      status: 'cloud_task_execution_failed',
      retryCount: 0,
      errorMessage: error instanceof Error ? error.message : 'Unknown error',
      additionalData: {
        adaptedVia: 'beginOutboundCallForSession',
        errorType: error instanceof Error ? error.constructor.name : 'UnknownError'
      }
    });

    throw error;
  }
}

/**
 * ‚úÖ Version de compatibilit√© avec l'ancienne signature
 * Accepte les param√®tres twilio et fromNumber mais ne les utilise pas
 */
export async function beginOutboundCallForSessionLegacy({
  callSessionId,
}: {
  callSessionId: string;
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  twilio?: any; // Param√®tre optionnel pour compatibilit√©
  fromNumber?: string; // Param√®tre optionnel pour compatibilit√©
}) {
  // D√©l√©guer √† la fonction principale
  return beginOutboundCallForSession(callSessionId);
}
