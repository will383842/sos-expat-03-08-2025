rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // ========================================
    // FONCTIONS UTILITAIRES DE SÉCURITÉ
    // ========================================
    function isAuthenticated() {
      return request.auth != null;
    }
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    function isEmailVerified() {
      return isAuthenticated() && request.auth.token.email_verified == true;
    }
    function isAdmin() {
      return isAuthenticated() && 
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    function isProvider() {
      return isAuthenticated() && 
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['lawyer', 'expat'];
    }
    function hasRole(role) {
      return isAuthenticated() && 
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == role;
    }
    function isApproved() {
      return isAuthenticated() && 
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isApproved == true;
    }
    function isNotBanned() {
      return isAuthenticated() && 
             (!exists(/databases/$(database)/documents/users/$(request.auth.uid)) ||
              get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isBanned != true);
    }
    function hasValidUserFields() {
      return request.resource.data.keys().hasAll(['email', 'role', 'firstName', 'lastName']) &&
             request.resource.data.email is string &&
             request.resource.data.role in ['client', 'lawyer', 'expat', 'admin'] &&
             request.resource.data.firstName is string &&
             request.resource.data.lastName is string;
    }

    // ========================================
    // COLLECTION USERS
    // ========================================
    match /users/{userId} {
      allow read: if isOwner(userId) || isAdmin() || (resource.data.isApproved == true && resource.data.role in ['lawyer', 'expat']);
      allow create: if isOwner(userId) && isEmailVerified() && hasValidUserFields() &&
                      request.resource.data.uid == request.auth.uid &&
                      request.resource.data.email == request.auth.token.email;
      allow update: if isOwner(userId) && isEmailVerified() && isNotBanned() &&
                      !request.resource.data.diff(resource.data).affectedKeys().hasAny(['role', 'isAdmin', 'isApproved', 'isBanned', 'uid', 'email']) ||
                      isAdmin();
      allow delete: if isAdmin();
    }

    // ========================================
    // COLLECTION SOS_PROFILES
    // ========================================
    match /sos_profiles/{profileId} {
      function hasValidProfileFields() {
        return request.resource.data.keys().hasAll(['uid', 'type', 'fullName']) &&
               request.resource.data.uid is string &&
               request.resource.data.type in ['lawyer', 'expat'] &&
               request.resource.data.fullName is string;
      }
      allow read: if (resource.data.isVisible == true && resource.data.type in ['lawyer', 'expat']) ||
                    isOwner(profileId) || isAdmin();
      allow create: if (isOwner(profileId) && isEmailVerified() && isProvider() &&
                        hasValidProfileFields() && request.resource.data.uid == request.auth.uid) ||
                       isAdmin();
      allow update: if isAdmin() ||
        (isOwner(profileId) && isEmailVerified() && isNotBanned() &&
          (
            (request.resource.data.diff(resource.data).changedKeys().hasOnly(['isVisibleOnMap']) &&
              request.resource.data.isVisibleOnMap is bool)
            ||
            (!request.resource.data.diff(resource.data).affectedKeys().hasAny(['uid', 'type', 'isApproved', 'isVerified']) &&
              hasValidProfileFields())
          )
        );
      allow delete: if isAdmin();
    }

    // ========================================
    // COLLECTION CALLS
    // ========================================
    match /calls/{callId} {
      allow read: if isAuthenticated() && (request.auth.uid == resource.data.clientId || request.auth.uid == resource.data.providerId) || isAdmin();
      allow create: if isAuthenticated() && isEmailVerified() && isNotBanned() &&
                      request.resource.data.clientId == request.auth.uid &&
                      request.resource.data.keys().hasAll(['clientId', 'providerId', 'serviceType']);
      allow update: if isAuthenticated() && isNotBanned() &&
                      (request.auth.uid == resource.data.clientId || request.auth.uid == resource.data.providerId) || isAdmin();
      allow delete: if isAdmin();
    }

    // ========================================
    // COLLECTION PAYMENTS
    // ========================================
    match /payments/{paymentId} {
      function hasValidPaymentFields() {
        return request.resource.data.keys().hasAll(['clientId', 'providerId', 'amount', 'status']) &&
               request.resource.data.amount is number && request.resource.data.amount > 0 &&
               request.resource.data.status in ['pending', 'authorized', 'captured', 'failed', 'refunded', 'canceled'];
      }
      allow read: if isAuthenticated() && (request.auth.uid == resource.data.clientId || request.auth.uid == resource.data.providerId) || isAdmin();
      allow create: if isAuthenticated() && isEmailVerified() && isNotBanned() &&
                      request.resource.data.clientId == request.auth.uid && hasValidPaymentFields();
      allow update: if isAdmin() && hasValidPaymentFields();
      allow delete: if isAdmin();
    }

    // ========================================
    // COLLECTION REVIEWS
    // ========================================
    match /reviews/{reviewId} {
      function hasValidReviewFields() {
        return request.resource.data.keys().hasAll(['clientId', 'providerId', 'rating', 'comment']) &&
               request.resource.data.rating is number && request.resource.data.rating >= 1 &&
               request.resource.data.rating <= 5 &&
               request.resource.data.comment is string && request.resource.data.comment.size() > 0;
      }
      allow read: if resource.data.isPublic == true ||
                    isAuthenticated() && (request.auth.uid == resource.data.clientId || request.auth.uid == resource.data.providerId) || isAdmin();
      allow create: if isAuthenticated() && isEmailVerified() && isNotBanned() &&
                      request.resource.data.clientId == request.auth.uid && hasValidReviewFields();
      allow update: if (isOwner(resource.data.clientId) &&
                       !request.resource.data.diff(resource.data).affectedKeys().hasAny(['clientId', 'providerId', 'isPublic']) &&
                       hasValidReviewFields()) || isAdmin();
      allow delete: if isOwner(resource.data.clientId) || isAdmin();
    }

    // ========================================
    // COLLECTION DOCUMENTS
    // ========================================
    match /documents/{documentId} {
      allow read: if isAuthenticated() && (request.auth.uid == resource.data.userId) || isAdmin();
      allow create: if isAuthenticated() && isEmailVerified() &&
                      request.resource.data.userId == request.auth.uid &&
                      request.resource.data.keys().hasAll(['userId', 'type', 'filename']);
      allow update: if isAdmin();
      allow delete: if isAuthenticated() && (request.auth.uid == resource.data.userId) || isAdmin();
    }

    // ========================================
    // COLLECTION NOTIFICATIONS
    // ========================================
    match /notifications/{notificationId} {
      allow read: if isAuthenticated() && (request.auth.uid == resource.data.userId) || isAdmin();
      allow create: if isAdmin();
      allow update: if isAuthenticated() &&
                      request.auth.uid == resource.data.userId &&
                      request.resource.data.diff(resource.data).affectedKeys().hasOnly(['isRead', 'readAt']) || isAdmin();
      allow delete: if isAuthenticated() && (request.auth.uid == resource.data.userId) || isAdmin();
    }

    // ========================================
    // COLLECTION CALL_SESSIONS
    // ========================================
    match /call_sessions/{sessionId} {
      allow read: if isAuthenticated() && (request.auth.uid == resource.data.clientId || request.auth.uid == resource.data.providerId) || isAdmin();
      allow create: if isAuthenticated() && isEmailVerified() && isNotBanned() &&
                      request.resource.data.clientId == request.auth.uid;
      allow update: if isAuthenticated() && isNotBanned() &&
                      (request.auth.uid == resource.data.clientId || request.auth.uid == resource.data.providerId) || isAdmin();
      allow delete: if isAdmin();
    }

    // ========================================
    // COLLECTION INVOICE_RECORDS
    // ========================================
    match /invoice_records/{invoiceId} {
      allow read: if isAuthenticated() && (request.auth.uid == resource.data.clientId || request.auth.uid == resource.data.providerId) || isAdmin();
      allow create: if isAuthenticated() && (request.auth.uid == request.resource.data.clientId || isAdmin());
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    // ========================================
    // COLLECTION NOTIFICATION_LOGS
    // ========================================
    match /notification_logs/{logId} {
      allow read: if isAuthenticated() && (request.auth.uid == resource.data.recipientId || isAdmin());
      allow create: if isAuthenticated() && isNotBanned();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    // ========================================
    // COLLECTIONS ADMINISTRATIVES
    // ========================================
    match /logs/{logId} { allow read, write: if isAdmin(); }
    match /analytics/{analyticsId} { allow read, write: if isAdmin(); }
    match /app_settings/{settingId} { allow read, write: if isAdmin(); }
    match /admin_settings/{settingId} { allow read, write: if isAdmin(); }
    match /backups/{backupId} { allow read, write: if isAdmin(); }
    match /contact_messages/{messageId} {
      allow read: if isAdmin();
      allow create: if true;
      allow update, delete: if isAdmin();
    }
    match /legal_documents/{docId} {
      allow read: if resource.data.published == true;
      allow write: if isAdmin();
    }
    match /coupons/{couponId} {
      allow read: if resource.data.active == true || isAdmin();
      allow write: if isAdmin();
    }
    match /coupon_usages/{usageId} {
      allow read: if isAuthenticated() && (request.auth.uid == resource.data.userId) || isAdmin();
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow update, delete: if isAdmin();
    }

    // ========================================
    // PUBLIC ACCESS FOR HOME PAGE
    // ========================================
    match /providers/{id} {
      allow read: if resource.data.approved == true && resource.data.published == true;
      allow create, update, delete: if isAdmin();
    }

    // ========================================
    // RÈGLE PAR DÉFAUT - TOUT REFUSER
    // ========================================
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
