rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // ============ UTILITAIRES ============
    function isAuthenticated() {
      return request.auth != null;
    }

    function isAdmin() {
      return isAuthenticated() &&
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    function isNotBanned() {
      return isAuthenticated() &&
        (!exists(/databases/$(database)/documents/users/$(request.auth.uid)) ||
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isBanned != true);
    }

    // Propriétaire basé sur le champ uid du document
    function isDocOwner() {
      return isAuthenticated() && resource.data.uid == request.auth.uid;
    }

    // Pour la création, on valide sur request.resource
    function creatingOwnDoc() {
      return isAuthenticated() && request.resource.data.uid == request.auth.uid;
    }

    function isProviderRole() {
      return isAuthenticated() &&
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['lawyer', 'expat'];
    }

    function hasValidUserFields() {
      return request.resource.data.keys().hasAll(['email','role','firstName','lastName']) &&
        request.resource.data.email is string &&
        request.resource.data.role in ['client','lawyer','expat','admin'] &&
        request.resource.data.firstName is string &&
        request.resource.data.lastName is string;
    }

    // Champs sensibles non modifiables par l'utilisateur
    function hasNoSensitiveChanges() {
      return !request.resource.data.diff(resource.data).affectedKeys()
        .hasAny(['role','isAdmin','isApproved','isBanned','uid','email','type','isVerified']);
    }

    // Lecture publique d'une fiche visible (home / carrousel)
    function isPublicProfile() {
      return (resource.data.isVisible == true || resource.data.isVisibleOnMap == true) &&
             (resource.data.type in ['lawyer','expat']);
    }

    // ---- Aides de validation de deltas ----
    function changedKeys() {
      return request.resource.data.diff(resource.data).changedKeys();
    }

    // Photo uniquement (users/providers)
    function onlyPhotoFieldsChanged() {
      return changedKeys().hasOnly(['profilePhoto','photoURL','avatar','updatedAt']);
    }

    // MAJ d'email autorisée UNIQUEMENT si l'email Firestore == email du token Auth
    function emailSelfSynced() {
      return changedKeys().hasOnly(['email','emailLower','updatedAt']) &&
             request.resource.data.email == request.auth.token.email;
    }

    // === Nouveau: set de champs de présence centralisé ===
    function presenceFields() {
      // NB: ajout de lastActiveAt et ua pour couvrir les mises à jour de présence côté client
      return [
        'isOnline','availability','lastStatusChange','lastSeen','lastSeenAt','lastActiveAt',
        'updatedAt','isVisible','isVisibleOnMap','ua'
      ];
    }

    // MAJ "présence" autorisée si TOUS les champs modifiés appartiennent à presenceFields()
    function presenceOnlyUpdate() {
      return changedKeys().hasOnly(presenceFields());
    }

    // MAJ étendue pour sos_profiles (présence + champs standards) — pas de champs sensibles
    function sosProfileUpdate() {
      let allowedFields = [
        'isOnline','availability','lastStatusChange','lastSeen','lastSeenAt','lastActiveAt','updatedAt',
        'isVisible','isVisibleOnMap','ua','profilePhoto','photoURL','avatar',
        'fullName','email','phone','phoneCountryCode','languages','country',
        'description','bio','specialties','helpTypes','yearsOfExperience',
        'interventionCountries','practiceCountries'
      ];
      return changedKeys().hasOnly(allowedFields);
    }

    // =============== USERS ===============
    match /users/{userId} {
      allow read: if (isAuthenticated() && request.auth.uid == userId) ||
                   isAdmin() ||
                   (resource.data.isApproved == true && resource.data.role in ['lawyer','expat']);

      // pas d'exigence d'email vérifié
      allow create: if isAuthenticated() &&
                     request.auth.uid == userId &&
                     creatingOwnDoc() &&
                     hasValidUserFields() &&
                     request.resource.data.email == request.auth.token.email;

      // Autoriser: photo seule, email sync, présence seule, ou MAJ sans champs sensibles
      allow update: if (
                      isAuthenticated() && request.auth.uid == userId && isNotBanned() && (
                        presenceOnlyUpdate() ||
                        onlyPhotoFieldsChanged() ||
                        emailSelfSynced() ||
                        hasNoSensitiveChanges()
                      )
                    ) || isAdmin();

      allow delete: if isAdmin();
    }

    // ====================== SOS_PROFILES ======================
    match /sos_profiles/{profileId} {
      allow read: if true;

      allow create: if isAuthenticated() && (
                      (request.resource.data.uid == request.auth.uid &&
                       request.resource.data.type in ['lawyer','expat']) ||
                      (profileId == request.auth.uid &&
                       request.resource.data.type in ['lawyer','expat']) ||
                      isAdmin()
                    );

      // Propriétaire: MAJ champs autorisés (voir sosProfileUpdate) ou présenceOnly.
      // Jamais de champs sensibles (role, isApproved, isBanned, etc.).
      allow update: if isAuthenticated() && (
                      (resource.data.uid == request.auth.uid && sosProfileUpdate()) ||
                      (profileId == request.auth.uid && sosProfileUpdate()) ||
                      ((resource.data.uid == request.auth.uid || profileId == request.auth.uid) &&
                       presenceOnlyUpdate()) ||
                      isAdmin()
                    );

      allow delete: if isAdmin();
    }

    // ================== PROVIDERS ==================
    match /providers/{providerId} {
      function hasValidProviderFields() {
        return request.resource.data.keys().hasAll(['uid','type','fullName']) &&
               request.resource.data.uid is string &&
               request.resource.data.type in ['lawyer','expat'] &&
               request.resource.data.fullName is string;
      }

      allow read: if isPublicProfile() || isDocOwner() || isAdmin();

      // pas d'email vérifié
      allow create: if (creatingOwnDoc() && isProviderRole() && hasValidProviderFields())
                    || isAdmin();

      allow update: if isAdmin()
                    || (
                         isDocOwner() && isNotBanned() && hasValidProviderFields() && (
                           presenceOnlyUpdate() ||
                           onlyPhotoFieldsChanged() ||
                           hasNoSensitiveChanges()
                         )
                       );

      allow delete: if isAdmin();
    }

    // ========= CALLS =========
    match /calls/{callId} {
      allow read: if isAuthenticated() &&
                    (request.auth.uid == resource.data.clientId ||
                     request.auth.uid == resource.data.providerId) ||
                  isAdmin();

      allow create: if isAuthenticated() && isNotBanned() &&
                     request.resource.data.clientId == request.auth.uid &&
                     request.resource.data.keys().hasAll(['clientId','providerId','serviceType']);

      allow update: if (isAuthenticated() && isNotBanned() &&
                        (request.auth.uid == resource.data.clientId ||
                         request.auth.uid == resource.data.providerId)) ||
                     isAdmin();

      allow delete: if isAdmin();
    }

    // ============ PAYMENTS ============
    match /payments/{paymentId} {
      function hasValidPaymentFields() {
        return request.resource.data.keys().hasAll(['clientId','providerId','amount','status']) &&
               request.resource.data.amount is number &&
               request.resource.data.amount > 0 &&
               request.resource.data.status in ['pending','authorized','captured','failed','refunded','canceled'];
      }

      allow read: if isAuthenticated() &&
                    (request.auth.uid == resource.data.clientId ||
                     request.auth.uid == resource.data.providerId) ||
                  isAdmin();

      allow create: if isAuthenticated() && isNotBanned() &&
                     request.resource.data.clientId == request.auth.uid &&
                     hasValidPaymentFields();

      allow update: if isAdmin() && hasValidPaymentFields();
      allow delete: if isAdmin();
    }

    // ========== REVIEWS ==========
    match /reviews/{reviewId} {
      function hasValidReviewFields() {
        return request.resource.data.keys().hasAll(['clientId','providerId','rating','comment']) &&
               request.resource.data.rating is number &&
               request.resource.data.rating >= 1 && request.resource.data.rating <= 5 &&
               request.resource.data.comment is string && request.resource.data.comment.size() > 0;
      }

      allow read: if resource.data.isPublic == true ||
                   (isAuthenticated() &&
                    (request.auth.uid == resource.data.clientId ||
                     request.auth.uid == resource.data.providerId)) ||
                   isAdmin();

      allow create: if isAuthenticated() && isNotBanned() &&
                     request.resource.data.clientId == request.auth.uid &&
                     hasValidReviewFields();

      allow update: if (isAuthenticated() && request.auth.uid == resource.data.clientId &&
                        hasValidReviewFields() &&
                        !request.resource.data.diff(resource.data).affectedKeys()
                          .hasAny(['clientId','providerId','isPublic'])) ||
                        isAdmin();

      allow delete: if (isAuthenticated() && request.auth.uid == resource.data.clientId) || isAdmin();
    }

    // ============ DOCUMENTS ============
    match /documents/{documentId} {
      allow read: if (isAuthenticated() && request.auth.uid == resource.data.userId) || isAdmin();
      allow create: if isAuthenticated() &&
                     request.resource.data.userId == request.auth.uid &&
                     request.resource.data.keys().hasAll(['userId','type','filename']);
      allow update: if isAdmin();
      allow delete: if (isAuthenticated() && request.auth.uid == resource.data.userId) || isAdmin();
    }

    // =============== NOTIFICATIONS ===============
    match /notifications/{notificationId} {
      allow read: if (isAuthenticated() && request.auth.uid == resource.data.userId) || isAdmin();
      allow create: if isAdmin();
      allow update: if (isAuthenticated() && request.auth.uid == resource.data.userId &&
                        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['isRead','readAt'])) ||
                       isAdmin();
      allow delete: if (isAuthenticated() && request.auth.uid == resource.data.userId) || isAdmin();
    }

    // ================= CALL_SESSIONS =================
    match /call_sessions/{sessionId} {
      allow read: if isAuthenticated() &&
                    (request.auth.uid == resource.data.clientId ||
                     request.auth.uid == resource.data.providerId) ||
                  isAdmin();

      allow create: if isAuthenticated() && isNotBanned() &&
                     request.resource.data.clientId == request.auth.uid;

      allow update: if (isAuthenticated() && isNotBanned() &&
                        (request.auth.uid == resource.data.clientId ||
                         request.auth.uid == resource.data.providerId)) ||
                     isAdmin();

      allow delete: if isAdmin();
    }

    // ================== INVOICE_RECORDS ==================
    match /invoice_records/{invoiceId} {
      allow read: if isAuthenticated() &&
                    (request.auth.uid == resource.data.clientId ||
                     request.auth.uid == resource.data.providerId) ||
                  isAdmin();

      allow create: if isAuthenticated() &&
                      (request.auth.uid == request.resource.data.clientId || isAdmin());

      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    // =================== NOTIFICATION_LOGS ===================
    match /notification_logs/{logId} {
      allow read: if isAuthenticated() &&
                    (request.auth.uid == resource.data.recipientId || isAdmin());
      allow create: if isAuthenticated() && isNotBanned();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    // ======================= Collections Admin =======================
    // permettre la création de logs même non authentifié (ex: échecs de login)
    match /logs/{logId} {
      allow create: if true;
      allow read, update, delete: if isAdmin();
    }
    match /analytics/{analyticsId} { allow read, write: if isAdmin(); }
    match /app_settings/{settingId} { allow read, write: if isAdmin(); }
    match /admin_settings/{settingId} { allow read, write: if isAdmin(); }
    match /backups/{backupId} { allow read, write: if isAdmin(); }

    // Messages de contact
    match /contact_messages/{messageId} {
      allow read: if isAdmin();
      allow create: if true;
      allow update, delete: if isAdmin();
    }

    // Docs légaux (pied de page): PUBLIC
    match /legal_documents/{docId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    // Coupons
    match /coupons/{couponId} {
      allow read: if resource.data.active == true || isAdmin();
      allow write: if isAdmin();
    }

    // Usage de coupons
    match /coupon_usages/{usageId} {
      allow read: if (isAuthenticated() && request.auth.uid == resource.data.userId) || isAdmin();
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow update, delete: if isAdmin();
    }

    // Par défaut : refuser
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
