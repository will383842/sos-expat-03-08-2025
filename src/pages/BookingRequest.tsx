import React, { useState, useEffect, useMemo } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { ArrowLeft, Euro, Shield, CheckCircle, AlertCircle, Phone, MessageCircle } from 'lucide-react';
import Layout from '../components/layout/Layout';
import Button from '../components/common/Button';
import { useAuth } from '../contexts/AuthContext';
import { useApp } from '../contexts/AppContext'; // üîß AJOUT: Import du contexte App
import { createBookingRequest } from '../utils/firestore';
import { logLanguageMismatch } from '../services/analytics';
import { Link } from 'react-router-dom';
import MultiLanguageSelect from '../components/forms-data/MultiLanguageSelect';
import { Language } from '../data/Languages-spoken';
import languages from '../data/Languages-spoken';
import { httpsCallable } from 'firebase/functions';
import { functions } from '../config/firebase';
import { Provider, normalizeProvider } from '../types/Provider';

const countries = [
  'Afghanistan',
  'Afrique du Sud',
  'Albanie',
  'Alg√©rie',
  'Allemagne',
  'Andorre',
  'Angola',
  'Antigua-et-Barbuda',
  'Arabie saoudite',
  'Argentine',
  'Arm√©nie',
  'Australie',
  'Autriche',
  'Azerba√Ødjan',
  'Bahamas',
  'Bahre√Øn',
  'Bangladesh',
  'Barbade',
  'Belgique',
  'Belize',
  'B√©nin',
  'Bhoutan',
  'Bi√©lorussie',
  'Birmanie',
  'Bolivie',
  'Bosnie-Herz√©govine',
  'Botswana',
  'Br√©sil',
  'Brunei',
  'Bulgarie',
  'Burkina Faso',
  'Burundi',
  'Cambodge',
  'Cameroun',
  'Canada',
  'Cap-Vert',
  'Chili',
  'Chine',
  'Chypre',
  'Colombie',
  'Comores',
  'Congo',
  'Congo (RDC)',
  'Cor√©e du Nord',
  'Cor√©e du Sud',
  'Costa Rica',
  'C√¥te d\'Ivoire',
  'Croatie',
  'Cuba',
  'Danemark',
  'Djibouti',
  'Dominique',
  '√âgypte',
  '√âmirats arabes unis',
  '√âquateur',
  '√ârythr√©e',
  'Espagne',
  'Estonie',
  '√âtats-Unis',
  '√âthiopie',
  'Fidji',
  'Finlande',
  'France',
  'Gabon',
  'Gambie',
  'G√©orgie',
  'Ghana',
  'Gr√®ce',
  'Grenade',
  'Guatemala',
  'Guin√©e',
  'Guin√©e-Bissau',
  'Guin√©e √©quatoriale',
  'Guyana',
  'Ha√Øti',
  'Honduras',
  'Hongrie',
  '√éles Cook',
  '√éles Marshall',
  '√éles Salomon',
  'Inde',
  'Indon√©sie',
  'Irak',
  'Iran',
  'Irlande',
  'Islande',
  'Isra√´l',
  'Italie',
  'Jama√Øque',
  'Japon',
  'Jordanie',
  'Kazakhstan',
  'Kenya',
  'Kirghizistan',
  'Kiribati',
  'Kowe√Øt',
  'Laos',
  'Lesotho',
  'Lettonie',
  'Liban',
  'Liberia',
  'Libye',
  'Liechtenstein',
  'Lituanie',
  'Luxembourg',
  'Mac√©doine du Nord',
  'Madagascar',
  'Malaisie',
  'Malawi',
  'Maldives',
  'Mali',
  'Malte',
  'Maroc',
  'Maurice',
  'Mauritanie',
  'Mexique',
  'Micron√©sie',
  'Moldavie',
  'Monaco',
  'Mongolie',
  'Mont√©n√©gro',
  'Mozambique',
  'Namibie',
  'Nauru',
  'N√©pal',
  'Nicaragua',
  'Niger',
  'Nigeria',
  'Norv√®ge',
  'Nouvelle-Z√©lande',
  'Oman',
  'Ouganda',
  'Ouzb√©kistan',
  'Pakistan',
  'Palaos',
  'Palestine',
  'Panama',
  'Papouasie-Nouvelle-Guin√©e',
  'Paraguay',
  'Pays-Bas',
  'P√©rou',
  'Philippines',
  'Pologne',
  'Portugal',
  'Qatar',
  'R√©publique centrafricaine',
  'R√©publique dominicaine',
  'R√©publique tch√®que',
  'Roumanie',
  'Royaume-Uni',
  'Russie',
  'Rwanda',
  'Saint-Christophe-et-Ni√©v√®s',
  'Saint-Marin',
  'Saint-Vincent-et-les-Grenadines',
  'Sainte-Lucie',
  'Salvador',
  'Samoa',
  'S√£o Tom√©-et-Principe',
  'S√©n√©gal',
  'Serbie',
  'Seychelles',
  'Sierra Leone',
  'Singapour',
  'Slovaquie',
  'Slov√©nie',
  'Somalie',
  'Soudan',
  'Soudan du Sud',
  'Sri Lanka',
  'Su√®de',
  'Suisse',
  'Suriname',
  'Syrie',
  'Tadjikistan',
  'Tanzanie',
  'Tchad',
  'Tha√Ølande',
  'Timor oriental',
  'Togo',
  'Tonga',
  'Trinit√©-et-Tobago',
  'Tunisie',
  'Turkm√©nistan',
  'Turquie',
  'Tuvalu',
  'Ukraine',
  'Uruguay',
  'Vanuatu',
  'Vatican',
  'Venezuela',
  'Vietnam',
  'Y√©men',
  'Zambie',
  'Zimbabwe'
];

interface NotificationData {
  type: string;
  providerId?: string;
  recipientEmail?: string;
  recipientPhone?: string;
  recipientName?: string;
  emailSubject?: string;
  emailHtml?: string;
  smsMessage?: string;
  whatsappMessage?: string;
}

interface BookingRequestData {
  clientPhone: string;
  clientId?: string;
  clientName: string;
  clientFirstName: string;
  clientLastName: string;
  clientNationality: string;
  clientCurrentCountry: string;
  clientWhatsapp: string;
  providerId: string;
  providerName: string;
  providerType: string;
  providerCountry: string;
  providerAvatar: string;
  providerRating?: number;
  providerReviewCount?: number;
  providerLanguages?: string[];
  providerSpecialties?: string[];
  title: string;
  description: string;
  clientLanguages: string[];
  clientLanguagesDetails: Array<{ code: string; name: string }>;
  price: number;
  duration: number;
  status: string;
  createdAt: Date;
  ip: string;
  userAgent: string;
  providerEmail?: string;
  providerPhone?: string;
}

// üîß INTERFACES STANDARDIS√âES POUR LE PASSAGE DE DONN√âES
interface StandardizedServiceData {
  title: string;
  description: string;
  clientDetails: {
    firstName: string;
    lastName: string;
    nationality: string;
    currentCountry: string;
    phone: string;
    whatsapp?: string;
    languages: string[];
    languagesDetails: Array<{ code: string; name: string }>;
  };
  serviceInfo: {
    type: 'lawyer_call' | 'expat_call';
    price: number;
    duration: number;
    requestId?: string;
  };
  metadata: {
    ip: string;
    userAgent: string;
    createdAt: Date;
  };
}

interface StandardizedProviderData {
  id: string;
  name: string;
  firstName?: string;
  lastName?: string;
  type: 'lawyer' | 'expat';
  country: string;
  avatar: string;
  price: number;
  duration: number;
  rating?: number;
  reviewCount?: number;
  languages?: string[];
  languagesSpoken?: string[];
  specialties?: string[];
  currentCountry?: string;
  email?: string;
  phone?: string;
}

const BookingRequest: React.FC = () => {
  const { providerId } = useParams<{ providerId: string }>();
  const navigate = useNavigate();
  const { user, isLoading: authLoading } = useAuth();
  const { language } = useApp(); // üîß AJOUT: R√©cup√©ration de la langue du contexte
  
  const [formData, setFormData] = useState({
    title: '',
    description: '',
    phoneCountryCode: '+33',
    phoneNumber: '',
    acceptTerms: false,
    firstName: '',
    lastName: '',
    nationality: '',
    currentCountry: '',
    whatsappNumber: '',
    whatsappCountryCode: '+33',
    autrePays: '',    
  });
  
  const [languagesSpoken, setLanguagesSpoken] = useState<Language[]>([]);
  const [isLoading, setIsLoading] = useState(false);
  const [fieldErrors, setFieldErrors] = useState<{ [key: string]: string }>({});
  const [formErrors, setFormErrors] = useState<string[]>([]);
  const [formError, setFormError] = useState('');
  const [hasLanguageMatchRealTime, setHasLanguageMatchRealTime] = useState(true);
  
  const inputClass = (fieldName: string) =>
    `w-full px-3 py-3 border rounded-lg bg-white text-gray-900 placeholder-gray-500 focus:outline-none transition-all duration-200 text-base ${
      fieldErrors[fieldName]
        ? 'border-red-500 focus:ring-2 focus:ring-red-500 focus:border-red-500 bg-red-50'
        : 'border-gray-300 focus:ring-2 focus:ring-blue-500 focus:border-blue-500 hover:border-gray-400'
    }`;

  // Rediriger vers login si non connect√©
  useEffect(() => {
    if (!authLoading && !user) {
      const currentUrl = `/booking-request/${providerId}`;
      navigate(`/login?redirect=${encodeURIComponent(currentUrl)}`, { replace: true });
    }
  }, [user, authLoading, providerId, navigate]);

  // R√©cup√©rer les donn√©es du prestataire depuis sessionStorage
  const getProviderData = (): Provider | null => {
    try {
      const savedProvider = sessionStorage.getItem('selectedProvider');
      if (savedProvider) {
        const providerData = JSON.parse(savedProvider);
        if (providerData.id === providerId) {
          return normalizeProvider(providerData);
        }
      }
    } catch (error) {
      console.error('Error parsing saved provider data:', error);
    }
    return null;
  };
  
  const provider = getProviderData();

  // useEffect pour v√©rifier le matching en temps r√©el
  useEffect(() => {
    if (!provider || (!provider.languages && !provider.languagesSpoken)) {
      setHasLanguageMatchRealTime(true);
      return;
    }

    if (languagesSpoken.length === 0) {
      setHasLanguageMatchRealTime(false);
      return;
    }

    const providerLanguages = provider.languages || provider.languagesSpoken || [];
    const clientLanguageCodes = languagesSpoken.map(lang => lang.code);
    const hasMatch = providerLanguages.some(providerLang => 
      clientLanguageCodes.includes(providerLang)
    );
    
    setHasLanguageMatchRealTime(hasMatch);
  }, [languagesSpoken, provider]);

  // Validation du formulaire
  const isFormValid = useMemo(() => {
    const basicValidation = (
      formData.firstName.trim().length > 0 &&
      formData.lastName.trim().length > 0 &&
      formData.title.trim().length >= 10 &&
      formData.description.trim().length >= 50 &&
      formData.phoneNumber.trim().length >= 6 &&
      formData.nationality.trim().length > 0 &&
      formData.currentCountry.trim().length > 0 &&
      languagesSpoken.length > 0 &&
      formData.acceptTerms &&
      (formData.currentCountry !== 'Autre' || formData.autrePays.trim().length > 0)
    );
    
    return basicValidation && hasLanguageMatchRealTime;
  }, [
    formData.firstName,
    formData.lastName,
    formData.title,
    formData.description,
    formData.phoneNumber,
    formData.nationality,
    formData.currentCountry,
    languagesSpoken,
    formData.acceptTerms,
    formData.autrePays,
    hasLanguageMatchRealTime
  ]);

  // Progress calculation for UX
  const formProgress = useMemo(() => {
    const fields = [
      formData.firstName.trim().length > 0,
      formData.lastName.trim().length > 0,
      formData.title.trim().length >= 10,
      formData.description.trim().length >= 50,
      formData.phoneNumber.trim().length >= 6,
      formData.nationality.trim().length > 0,
      formData.currentCountry.trim().length > 0,
      languagesSpoken.length > 0,
      formData.acceptTerms,
      (formData.currentCountry !== 'Autre' || formData.autrePays.trim().length > 0),
      hasLanguageMatchRealTime
    ];
    
    const completed = fields.filter(Boolean).length;
    return Math.round((completed / fields.length) * 100);
  }, [
    formData.firstName,
    formData.lastName,
    formData.title,
    formData.description,
    formData.phoneNumber,
    formData.nationality,
    formData.currentCountry,
    languagesSpoken,
    formData.acceptTerms,
    formData.autrePays,
    hasLanguageMatchRealTime
  ]);

  // Si pas de provider, rediriger vers la liste
  useEffect(() => {
    if (!authLoading && !provider) {
      navigate('/');
    }
  }, [provider, authLoading, navigate]);

  if (!provider) {
    return null;
  }

  const isLawyer = provider.type === 'lawyer';

  const sanitizeInput = (input: string): string => {
    return input
      .replace(/[<>]/g, '')
      .replace(/&/g, '&amp;')
      .replace(/"/g, '&quot;')
      .replace(/'/g, '&#x27;')
      .replace(/\//g, '&#x2F;')
      .trim();
  };

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => {
    const { name, value, type } = e.target;
    
    if (type === 'checkbox') {
      const checked = (e.target as HTMLInputElement).checked;
      setFormData(prev => ({ ...prev, [name]: checked }));
    } else {
      let sanitizedValue = value;
      if (name === 'phoneNumber' || name === 'whatsappNumber') {
        sanitizedValue = value.replace(/[^\d\s+()-]/g, '');
      } else {
        sanitizedValue = sanitizeInput(value);
      }
      
      setFormData(prev => ({ ...prev, [name]: sanitizedValue }));
    }
    
    if (formError) {
      setFormError('');
    }
    if (fieldErrors[name]) {
      setFieldErrors(prev => ({ ...prev, [name]: '' }));
    }
  };

  // üîß FIX: Fonction am√©lior√©e pour notifier le prestataire avec debug d√©taill√©
  const notifyProviderOfRequest = async (providerId: string, requestData: BookingRequestData): Promise<{ success: boolean; result?: unknown; error?: unknown }> => {
    console.log('üîç [DEBUG] === D√âBUT NOTIFICATION PRESTATAIRE ===');
    console.log('üîç [DEBUG] Provider ID:', providerId);
    console.log('üîç [DEBUG] Request Data Keys:', Object.keys(requestData));
    console.log('üîç [DEBUG] Provider Email:', requestData.providerEmail);
    console.log('üîç [DEBUG] Provider Phone:', requestData.providerPhone);
    console.log('üîç [DEBUG] Client Info:', {
      name: `${requestData.clientFirstName} ${requestData.clientLastName}`,
      phone: requestData.clientPhone,
      country: requestData.clientCurrentCountry
    });

    try {
      if (!requestData.providerEmail && !requestData.providerPhone) {
        console.warn('‚ö†Ô∏è [DEBUG] Aucun contact disponible pour le prestataire');
        return { success: false, error: 'Aucun contact disponible pour le prestataire' };
      }

      if (!requestData.title || requestData.title.trim().length === 0) {
        console.error('‚ùå [DEBUG] Titre manquant dans la demande');
        return { success: false, error: 'Titre de la demande manquant' };
      }

      if (!requestData.description || requestData.description.trim().length === 0) {
        console.error('‚ùå [DEBUG] Description manquante dans la demande');
        return { success: false, error: 'Description de la demande manquante' };
      }

      console.log('‚úÖ [DEBUG] Validation des donn√©es r√©ussie');

      const notificationData: NotificationData = {
        type: 'provider_booking_request',
        providerId: providerId,
        recipientName: requestData.providerName || 'Prestataire',
        emailSubject: `SOS Expat - Nouvelle demande: ${requestData.title.substring(0, 50)}`,
        
        emailHtml: `
<h2>Nouvelle demande de consultation</h2>
<p><strong>Client:</strong> ${requestData.clientFirstName} ${requestData.clientLastName}</p>
<p><strong>Nationalit√©:</strong> ${requestData.clientNationality}</p>
<p><strong>Pays:</strong> ${requestData.clientCurrentCountry}</p>
<p><strong>T√©l√©phone:</strong> ${requestData.clientPhone}</p>
<p><strong>Titre:</strong> ${requestData.title}</p>
<p><strong>Description:</strong> ${requestData.description}</p>
<hr>
<p>Connectez-vous √† votre espace prestataire pour r√©pondre.</p>
        `.trim(),

        smsMessage: `SOS Expat: Nouvelle demande de ${requestData.clientFirstName}. Titre: "${requestData.title.substring(0, 30)}...". Consultez votre espace.`,

        whatsappMessage: `üîî SOS Expat: Nouvelle demande de ${requestData.clientFirstName} ${requestData.clientLastName}.\n\nTitre: "${requestData.title}"\nPays: ${requestData.clientCurrentCountry}\n\nConsultez votre espace prestataire.`
      };

      if (requestData.providerEmail && requestData.providerEmail.includes('@')) {
        notificationData.recipientEmail = requestData.providerEmail;
        console.log('‚úÖ [DEBUG] Email ajout√©:', requestData.providerEmail);
      } else {
        console.warn('‚ö†Ô∏è [DEBUG] Email invalide ou manquant, notification par email ignor√©e');
      }

      if (requestData.providerPhone && requestData.providerPhone.length > 5) {
        notificationData.recipientPhone = requestData.providerPhone;
        console.log('‚úÖ [DEBUG] T√©l√©phone ajout√©:', requestData.providerPhone);
      } else {
        console.warn('‚ö†Ô∏è [DEBUG] T√©l√©phone invalide ou manquant, notification SMS/WhatsApp ignor√©e');
      }

      console.log('üì§ [DEBUG] Donn√©es finales √† envoyer:', {
        type: notificationData.type,
        hasEmail: !!notificationData.recipientEmail,
        hasPhone: !!notificationData.recipientPhone,
        emailSubject: notificationData.emailSubject,
        htmlLength: notificationData.emailHtml?.length || 0,
        smsLength: notificationData.smsMessage?.length || 0
      });

      console.log('üîó [DEBUG] Test de connectivit√© Firebase Functions...');
      if (!functions) {
        throw new Error('Firebase Functions non initialis√©');
      }

      const sendNotification = httpsCallable(functions, 'sendEmail');
      console.log('‚úÖ [DEBUG] Fonction sendEmail r√©cup√©r√©e avec succ√®s');

      console.log('üöÄ [DEBUG] Envoi de la notification...');
      const result = await sendNotification(notificationData);
      
      console.log('‚úÖ [DEBUG] R√©ponse re√ßue:', {
        hasData: !!result.data,
        dataType: typeof result.data,
        dataKeys: result.data ? Object.keys(result.data) : 'N/A'
      });
      
      console.log('‚úÖ [DEBUG] Notification prestataire envoy√©e avec succ√®s');
      return { success: true, result };
      
    } catch (error: unknown) {
      console.error('‚ùå [DEBUG] === ERREUR D√âTAILL√âE NOTIFICATION ===');
      console.error('‚ùå [DEBUG] Type d\'erreur:', typeof error);
      console.error('‚ùå [DEBUG] Erreur compl√®te:', error);
      
      if (error && typeof error === 'object') {
        const errorObj = error as any;
        console.error('‚ùå [DEBUG] Propri√©t√©s d\'erreur:', Object.keys(errorObj));
        console.error('‚ùå [DEBUG] Code d\'erreur:', errorObj.code);
        console.error('‚ùå [DEBUG] Message d\'erreur:', errorObj.message);
        console.error('‚ùå [DEBUG] D√©tails d\'erreur:', errorObj.details);
        console.error('‚ùå [DEBUG] Stack trace:', errorObj.stack);
        
        if (errorObj.code) {
          switch (errorObj.code) {
            case 'functions/invalid-argument':
              console.error('‚ùå [DEBUG] Erreur: Arguments invalides envoy√©s √† la fonction');
              break;
            case 'functions/unauthenticated':
              console.error('‚ùå [DEBUG] Erreur: Utilisateur non authentifi√©');
              break;
            case 'functions/permission-denied':
              console.error('‚ùå [DEBUG] Erreur: Permissions insuffisantes');
              break;
            case 'functions/not-found':
              console.error('‚ùå [DEBUG] Erreur: Fonction Cloud non trouv√©e');
              break;
            case 'functions/internal':
              console.error('‚ùå [DEBUG] Erreur: Erreur interne du serveur');
              break;
            case 'functions/unavailable':
              console.error('‚ùå [DEBUG] Erreur: Service temporairement indisponible');
              break;
            default:
              console.error('‚ùå [DEBUG] Erreur: Code d\'erreur non reconnu:', errorObj.code);
          }
        }
      }
      
      console.error('‚ùå [DEBUG] Context:', {
        providerId,
        clientName: `${requestData.clientFirstName} ${requestData.clientLastName}`,
        title: requestData.title,
        timestamp: new Date().toISOString(),
        userAgent: navigator.userAgent,
        url: window.location.href
      });
      
      return { success: false, error };
    }
  };

  // üîß FONCTION STANDARDIS√âE POUR PR√âPARER LES DONN√âES
  const prepareStandardizedData = (
    formData: typeof formData, 
    provider: Provider, 
    user: { id?: string; firstName?: string; lastName?: string } | null
  ): {
    selectedProvider: StandardizedProviderData;
    serviceData: StandardizedServiceData;
    bookingRequest: BookingRequestData;
  } => {
    
    const selectedProvider: StandardizedProviderData = {
      id: provider.id,
      name: provider.name,
      firstName: provider.firstName,
      lastName: provider.lastName,
      type: provider.type,
      country: provider.country,
      avatar: provider.avatar,
      price: provider.price,
      duration: provider.duration,
      rating: provider.rating,
      reviewCount: provider.reviewCount,
      languages: provider.languages,
      languagesSpoken: provider.languagesSpoken,
      specialties: provider.specialties,
      currentCountry: provider.currentCountry,
      email: provider.email,
      phone: provider.phone
    };

    const serviceData: StandardizedServiceData = {
      title: sanitizeInput(formData.title),
      description: sanitizeInput(formData.description),
      clientDetails: {
        firstName: sanitizeInput(formData.firstName),
        lastName: sanitizeInput(formData.lastName),
        nationality: sanitizeInput(formData.nationality),
        currentCountry: sanitizeInput(
          formData.currentCountry === 'Autre' ? formData.autrePays : formData.currentCountry
        ),
        phone: `${formData.phoneCountryCode}${formData.phoneNumber.replace(/\s+/g, '')}`,
        whatsapp: formData.whatsappNumber ? `${formData.whatsappCountryCode}${formData.whatsappNumber.replace(/\s+/g, '')}` : undefined,
        languages: languagesSpoken.map(lang => lang.code),
        languagesDetails: languagesSpoken.map(lang => ({
          code: lang.code,
          name: lang.name
        }))
      },
      serviceInfo: {
        type: provider.type === 'lawyer' ? 'lawyer_call' : 'expat_call',
        price: provider.price,
        duration: provider.duration,
        requestId: `req_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`
      },
      metadata: {
        ip: window.location.hostname,
        userAgent: navigator.userAgent,
        createdAt: new Date()
      }
    };

    const bookingRequest: BookingRequestData = {
      clientPhone: serviceData.clientDetails.phone,
      clientId: user?.id,
      clientName: `${serviceData.clientDetails.firstName} ${serviceData.clientDetails.lastName}`,
      clientFirstName: serviceData.clientDetails.firstName,
      clientLastName: serviceData.clientDetails.lastName,
      clientNationality: serviceData.clientDetails.nationality,
      clientCurrentCountry: serviceData.clientDetails.currentCountry,
      clientWhatsapp: serviceData.clientDetails.whatsapp || '',
      providerId: selectedProvider.id,
      providerName: selectedProvider.name,
      providerType: selectedProvider.type,
      providerCountry: selectedProvider.country,
      providerAvatar: selectedProvider.avatar,
      providerRating: selectedProvider.rating,
      providerReviewCount: selectedProvider.reviewCount,
      providerLanguages: selectedProvider.languages,
      providerSpecialties: selectedProvider.specialties,
      title: serviceData.title,
      description: serviceData.description,
      clientLanguages: serviceData.clientDetails.languages,
      clientLanguagesDetails: serviceData.clientDetails.languagesDetails,
      price: serviceData.serviceInfo.price,
      duration: serviceData.serviceInfo.duration,
      status: 'pending',
      createdAt: serviceData.metadata.createdAt,
      ip: serviceData.metadata.ip,
      userAgent: serviceData.metadata.userAgent,
      providerEmail: selectedProvider.email,
      providerPhone: selectedProvider.phone
    };

    return {
      selectedProvider,
      serviceData,
      bookingRequest
    };
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!hasLanguageMatchRealTime) {
      try {
        await logLanguageMismatch({
          clientLanguages: languagesSpoken.map(lang => lang.code),
          customLanguage: undefined,
          providerId: provider?.id || '',
          providerLanguages: provider?.languages || provider?.languagesSpoken || [],
          formData: {
            title: formData.title,
            description: formData.description,
            nationality: formData.nationality,
            currentCountry: formData.currentCountry === 'Autre' ? formData.autrePays : formData.currentCountry
          },
          source: 'booking_request_form'
        });
        console.log('üìä Incompatibilit√© linguistique logg√©e pour analyse');
      } catch (logError) {
        console.error('‚ùå Erreur lors du logging de l\'incompatibilit√© linguistique:', logError);
      }
      
      setFormError("Vous devez partager au moins une langue avec le prestataire.");
      return;
    }
    
    // Validation du formulaire
    const validateForm = () => {
      const errors: Record<string, string> = {};
      const globalErrors: string[] = [];
      let isValid = true;

      if (!formData.firstName.trim()) {
        errors.firstName = 'Pr√©nom requis';
        globalErrors.push('‚Äì Pr√©nom requis');
        isValid = false;
      }

      if (!formData.lastName.trim()) {
        errors.lastName = 'Nom requis';
        globalErrors.push('‚Äì Nom requis');
        isValid = false;
      }

      if (formData.title.trim().length < 10) {
        errors.title = 'Le titre doit contenir au moins 10 caract√®res';
        globalErrors.push('‚Äì Titre trop court (min. 10 caract√®res)');
        isValid = false;
      }

      if (formData.description.trim().length < 50) {
        errors.description = 'La description doit contenir au moins 50 caract√®res';
        globalErrors.push('‚Äì Description trop courte (min. 50 caract√®res)');
        isValid = false;
      }

      if (!formData.nationality.trim()) {
        errors.nationality = 'Nationalit√© requise';
        globalErrors.push('‚Äì Nationalit√© requise');
        isValid = false;
      }

      if (!formData.currentCountry.trim()) {
        errors.currentCountry = 'Pays requis';
        globalErrors.push('‚Äì Pays d\'intervention requis');
        isValid = false;
      }

      if (formData.currentCountry === 'Autre' && !formData.autrePays.trim()) {
        errors.autrePays = 'Pays requis';
        globalErrors.push('‚Äì Veuillez pr√©ciser votre pays');
        isValid = false;
      }

      if (languagesSpoken.length === 0) {
        errors.languages = 'S√©lectionnez au moins une langue';
        globalErrors.push('‚Äì S√©lectionnez au moins une langue');
        isValid = false;
      }

      if (formData.phoneNumber.trim().length < 6) {
        errors.phoneNumber = 'Num√©ro de t√©l√©phone invalide';
        globalErrors.push('‚Äì Num√©ro de t√©l√©phone invalide');
        isValid = false;
      }

      if (!formData.acceptTerms) {
        globalErrors.push('‚Äì Vous devez accepter les conditions');
        isValid = false;
      }

      if (!hasLanguageMatchRealTime) {
        globalErrors.push('‚Äì Aucune langue en commun avec le prestataire');
        isValid = false;
      }

      setFieldErrors(errors);

      if (!isValid) {
        setFormErrors(globalErrors);
        return false;
      } else {
        setFormErrors([]);
        return true;
      }
    };

    if (!validateForm()) {
      // Scroll vers la premi√®re erreur
      setTimeout(() => {
        const firstError = document.querySelector('.error-field, [data-error="true"]');
        if (firstError) {
          firstError.scrollIntoView({ 
            behavior: 'smooth', 
            block: 'center' 
          });
        }
      }, 100);
      return;
    }

    setIsLoading(true);

    try {
      // üîß PR√âPARATION DES DONN√âES STANDARDIS√âES
      const { selectedProvider, serviceData, bookingRequest } = prepareStandardizedData(formData, provider, user);

      console.log('üöÄ Donn√©es standardis√©es pr√©par√©es:', {
        selectedProvider: selectedProvider.id,
        serviceData: serviceData.title,
        price: serviceData.serviceInfo.price
      });

      // Sauvegarder la demande dans Firestore
      if (user) {
        try {
          await createBookingRequest(bookingRequest);
          console.log('‚úÖ Demande de r√©servation sauvegard√©e dans Firestore');
        } catch (error) {
          console.error('‚ùå Erreur lors de la sauvegarde:', error);
        }
      }

      // üîß SAUVEGARDE DANS SESSIONSTORAGE POUR CALL-CHECKOUT (DONN√âES COH√âRENTES)
      try {
        const commissionAmount = Math.round(serviceData.serviceInfo.price * 0.20 * 100) / 100;
        const providerAmount = Math.round(serviceData.serviceInfo.price * 0.80 * 100) / 100;

        sessionStorage.setItem('selectedProvider', JSON.stringify(selectedProvider));
        sessionStorage.setItem('serviceData', JSON.stringify({
          providerId: selectedProvider.id,
          serviceType: serviceData.serviceInfo.type,
          providerRole: selectedProvider.type,
          amount: serviceData.serviceInfo.price,
          duration: serviceData.serviceInfo.duration,
          clientPhone: serviceData.clientDetails.phone,
          commissionAmount: commissionAmount,
          providerAmount: providerAmount
        }));
        
        console.log('üíæ Donn√©es sauvegard√©es dans sessionStorage pour call-checkout');
      } catch (storageError) {
        console.warn('‚ö†Ô∏è Erreur sessionStorage (non bloquant):', storageError);
      }

      // üîß FIX: Envoyer la notification au prestataire avec debug am√©lior√© (non bloquant)
      console.log('üìß [DEBUG] Tentative d\'envoi de notification au prestataire...');
      try {
        const notificationResult = await notifyProviderOfRequest(provider.id, bookingRequest);
        if (notificationResult.success) {
          console.log('‚úÖ [DEBUG] Notification prestataire envoy√©e avec succ√®s');
        } else {
          console.warn('‚ö†Ô∏è [DEBUG] √âchec de notification prestataire (non bloquant):', notificationResult.error);
        }
      } catch (notificationError) {
        console.warn("‚ö†Ô∏è [DEBUG] Erreur de notification prestataire (non bloquant):", notificationError);
      }

      // üîß NAVIGATION VERS CALL-CHECKOUT AVEC PROVIDER ID
      console.log(`üß≠ Navigation vers call-checkout/${providerId}...`);
      
      navigate(`/call-checkout/${providerId}`);
      
    } catch (error) {
      console.error('‚ùå Erreur lors de la soumission:', error);
      setFormError('Une erreur est survenue. Veuillez r√©essayer.');
    } finally {
      setIsLoading(false);
    }
  };

  const countryCodeOptions = [
    { code: '+33', flag: 'üá´üá∑', country: 'FR' },
    { code: '+1', flag: 'üá∫üá∏', country: 'US' },
    { code: '+44', flag: 'üá¨üáß', country: 'GB' },
    { code: '+49', flag: 'üá©üá™', country: 'DE' },
    { code: '+34', flag: 'üá™üá∏', country: 'ES' },
    { code: '+39', flag: 'üáÆüáπ', country: 'IT' },
    { code: '+66', flag: 'üáπüá≠', country: 'TH' },
    { code: '+61', flag: 'üá¶üá∫', country: 'AU' },
    { code: '+81', flag: 'üáØüáµ', country: 'JP' },
    { code: '+86', flag: 'üá®üá≥', country: 'CN' }
  ];

  return (
    <Layout>
      <div className="min-h-screen bg-gradient-to-br from-blue-50 via-white to-red-50 py-4 px-4 sm:py-8">
        <div className="max-w-3xl mx-auto">
          {/* Progress Bar */}
          <div className="mb-4 sm:mb-6">
            <div className="flex items-center justify-between mb-2">
              <span className="text-sm font-medium text-gray-700">Progression</span>
              <span className="text-sm font-medium text-blue-600">{formProgress}%</span>
            </div>
            <div className="w-full bg-gray-200 rounded-full h-2">
              <div 
                className="bg-gradient-to-r from-blue-500 to-green-500 h-2 rounded-full transition-all duration-300 ease-out"
                style={{ width: `${formProgress}%` }}
              ></div>
            </div>
          </div>

          <div className="bg-white rounded-2xl shadow-xl overflow-hidden border border-gray-100">
            {/* Header */}
            <div className="bg-gradient-to-r from-blue-600 via-purple-600 to-red-600 px-4 py-4 sm:px-6 sm:py-6">
              <div className="flex items-center space-x-4">
                <button
                  onClick={() => navigate(`/provider/${provider.id}`)}
                  className="text-white/80 hover:text-white transition-colors p-2 rounded-lg hover:bg-white/10"
                  aria-label="Retour"
                >
                  <ArrowLeft size={20} />
                </button>
                <div>
                  <h1 className="text-xl sm:text-2xl font-bold text-white">
                    D√©crivez votre demande
                  </h1>
                  <p className="text-white/80 text-sm mt-1">
                    Partagez les d√©tails de votre situation
                  </p>
                </div>
              </div>
            </div>

            {/* Provider Info */}
            <div className="p-4 sm:p-6 border-b border-gray-100 bg-gradient-to-r from-gray-50 to-blue-50">
              <div className="flex flex-col sm:flex-row sm:justify-between sm:items-start space-y-4 sm:space-y-0 sm:space-x-6">
                <div className="flex items-start space-x-4">
                  <div className="w-16 h-16 sm:w-20 sm:h-20 rounded-2xl overflow-hidden border-2 border-blue-400 flex items-center justify-center bg-white shadow-lg flex-shrink-0">
                    {provider?.avatar ? (
                      <img
                        src={provider.avatar}
                        alt={`Photo de ${provider.name}`}
                        className="w-full h-full object-cover"
                        onError={(e) => {
                          const target = e.target as HTMLImageElement;
                          target.onerror = null;
                          target.src = '/default-avatar.png';
                        }}
                      />
                    ) : (
                      <img
                        src="/default-avatar.png"
                        alt="Avatar par d√©faut"
                        className="w-full h-full object-cover"
                      />
                    )}
                  </div>

                  <div className="flex-1 min-w-0">
                    <h3 className="text-lg sm:text-xl font-bold text-gray-900 truncate">
                      {provider?.name || "Nom du prestataire"}
                    </h3>

                    <div className="mt-2 sm:mt-3 text-sm text-gray-700 space-y-2">
                      <div>
                        <span
                          className={`inline-flex items-center px-2 sm:px-3 py-1 rounded-full text-xs font-semibold ${
                            isLawyer
                              ? "bg-blue-100 text-blue-800 border border-blue-200"
                              : "bg-green-100 text-green-800 border border-green-200"
                          }`}
                        >
                          {isLawyer ? "‚öñÔ∏è Avocat" : "üåç Expatri√© aidant"}
                        </span>
                      </div>

                      <div className="text-xs sm:text-sm">
                        <span className="font-medium">üìç</span>
                        <span className="ml-1">{provider.country}</span>
                      </div>

                      {provider?.languages && Array.isArray(provider.languages) && provider.languages.length > 0 && (
                        <div className="flex items-start">
                          <span className="font-medium text-xs sm:text-sm">üó£Ô∏è</span>
                          <div className="ml-2 flex flex-wrap gap-1">
                            {provider.languages
                              .slice(0, 3)
                              .map((code) => {
                                const lang = languages.find((l) => l.code === code);
                                return lang ? lang.name : code;
                              })
                              .map((langName, index) => (
                                <span key={index} className="inline-block px-1 py-0.5 bg-blue-100 text-blue-800 text-xs rounded border border-blue-200">
                                  {langName}
                                </span>
                              ))}
                            {provider.languages.length > 3 && (
                              <span className="text-xs text-gray-500">+{provider.languages.length - 3}</span>
                            )}
                          </div>
                        </div>
                      )}                    
                    </div>
                  </div>
                </div>

                <div className="text-center sm:text-right bg-white rounded-xl p-3 sm:p-4 shadow-lg border border-gray-200 w-full sm:w-auto">
                  {/* üîß FIX: Correction de l'affichage du prix */}
                  <div className="text-2xl sm:text-3xl font-bold text-blue-600">
                    ‚Ç¨{provider?.price ? provider.price.toFixed(2) : "--"}
                  </div>
                  <div className="text-sm text-gray-600 mt-1">
                    {provider?.duration ? `${provider.duration} min` : "--"}
                  </div>
                  <div className="mt-2 text-xs text-gray-500">
                    üí≥ Paiement s√©curis√©
                  </div>
                </div>
              </div>
            </div>

            {/* Form */}
            <form onSubmit={handleSubmit} className="p-4 sm:p-8 space-y-6 sm:space-y-8" noValidate>
              {formErrors.length > 0 && (
                <div className="bg-red-50 border-l-4 border-red-400 p-4 rounded-lg">
                  <div className="flex">
                    <AlertCircle className="h-5 w-5 text-red-400 mt-0.5 flex-shrink-0" />
                    <div className="ml-3">
                      <p className="font-medium text-red-800">Veuillez corriger les erreurs suivantes :</p>
                      <ul className="list-disc list-inside text-sm text-red-700 mt-2 space-y-1">
                        {formErrors.map((error, index) => (
                          <li key={index}>{error}</li>
                        ))}
                      </ul>
                    </div>
                  </div>
                </div>
              )}

              {formError && (
                <div className="bg-red-50 border-l-4 border-red-400 p-4 rounded-lg">
                  <div className="flex">
                    <AlertCircle className="h-5 w-5 text-red-400 flex-shrink-0" />
                    <div className="ml-3">
                      <p className="font-medium text-red-800">{formError}</p>
                    </div>
                  </div>
                </div>
              )}

              {/* Section Informations personnelles */}
              <div className="bg-gradient-to-r from-blue-50 to-red-50 rounded-xl p-4 sm:p-6 border border-blue-100">
                <h3 className="text-lg font-semibold text-gray-900 mb-4 flex items-center">
                  üë§ Informations personnelles
                </h3>
                
                <div className="space-y-4 sm:space-y-6">
                  {/* Pr√©nom et Nom */}
                  <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                    <div>
                      <label htmlFor="firstName" className="block text-sm font-medium text-gray-700 mb-2">
                        Pr√©nom <span className="text-red-500">*</span>
                      </label>
                      <input
                        id="firstName"
                        name="firstName"
                        type="text"
                        required
                        value={formData.firstName}
                        onChange={handleInputChange}
                        className={`${inputClass('firstName')} ${fieldErrors.firstName ? 'error-field' : ''}`}
                        data-error={!!fieldErrors.firstName}
                        placeholder="Votre pr√©nom"
                      />
                      {fieldErrors.firstName && (
                        <p className="mt-2 text-sm text-red-600 flex items-center">
                          <AlertCircle size={16} className="mr-1 flex-shrink-0" />
                          {fieldErrors.firstName}
                        </p>
                      )}
                    </div>

                    <div>
                      <label htmlFor="lastName" className="block text-sm font-medium text-gray-700 mb-2">
                        Nom <span className="text-red-500">*</span>
                      </label>
                      <input
                        id="lastName"
                        name="lastName"
                        type="text"
                        required
                        value={formData.lastName}
                        onChange={handleInputChange}
                        className={`${inputClass('lastName')} ${fieldErrors.lastName ? 'error-field' : ''}`}
                        data-error={!!fieldErrors.lastName}
                        placeholder="Votre nom"
                      />
                      {fieldErrors.lastName && (
                        <p className="mt-2 text-sm text-red-600 flex items-center">
                          <AlertCircle size={16} className="mr-1 flex-shrink-0" />
                          {fieldErrors.lastName}
                        </p>
                      )}
                    </div>
                  </div>

                  {/* Nationalit√© */}
                  <div>
                    <label htmlFor="nationality" className="block text-sm font-medium text-gray-700 mb-2">
                      Nationalit√© <span className="text-red-500">*</span>
                    </label>
                    <input
                      id="nationality"
                      name="nationality"
                      type="text"
                      required
                      value={formData.nationality}
                      onChange={handleInputChange}
                      className={`${inputClass('nationality')} ${fieldErrors.nationality ? 'error-field' : ''}`}
                      data-error={!!fieldErrors.nationality}
                      placeholder="Ex: Fran√ßaise, Am√©ricaine..."
                    />
                    {fieldErrors.nationality && (
                      <p className="mt-2 text-sm text-red-600 flex items-center">
                        <AlertCircle size={16} className="mr-1 flex-shrink-0" />
                        {fieldErrors.nationality}
                      </p>
                    )}
                  </div>

                  {/* Pays d'intervention */}
                  <div>
                    <label htmlFor="currentCountry" className="block text-sm font-medium text-gray-700 mb-2">
                      Pays d'intervention <span className="text-red-500">*</span>
                    </label>
                    <select
                      id="currentCountry"
                      name="currentCountry"
                      required
                      value={formData.currentCountry}
                      onChange={handleInputChange}
                      className={`${inputClass('currentCountry')} ${fieldErrors.currentCountry ? 'error-field' : ''}`}
                      data-error={!!fieldErrors.currentCountry}
                    >
                      <option value="">-- S√©lectionnez un pays --</option>
                      {countries.map((country) => (
                        <option key={country} value={country}>
                          {country}
                        </option>
                      ))}
                      <option value="Autre">Autre</option>
                    </select>
                    {fieldErrors.currentCountry && (
                      <p className="mt-2 text-sm text-red-600 flex items-center">
                        <AlertCircle size={16} className="mr-1 flex-shrink-0" />
                        {fieldErrors.currentCountry}
                      </p>
                    )}

                    {formData.currentCountry === 'Autre' && (
                      <div className="mt-3">
                        <input
                          id="autrePays"
                          name="autrePays"
                          type="text"
                          required
                          value={formData.autrePays}
                          onChange={handleInputChange}
                          className={`${inputClass('autrePays')} ${fieldErrors.autrePays ? 'error-field' : ''}`}
                          data-error={!!fieldErrors.autrePays}
                          placeholder="Pr√©cisez votre pays"
                        />
                        {fieldErrors.autrePays && (
                          <p className="mt-2 text-sm text-red-600 flex items-center">
                            <AlertCircle size={16} className="mr-1 flex-shrink-0" />
                            {fieldErrors.autrePays}
                          </p>
                        )}
                      </div>
                    )}
                  </div>
                </div>
              </div>

              {/* Section Votre demande */}
              <div className="bg-gradient-to-r from-green-50 to-blue-50 rounded-xl p-4 sm:p-6 border border-green-100">
                <h3 className="text-lg font-semibold text-gray-900 mb-4 flex items-center">
                  üìù Votre demande
                </h3>

                {/* Titre */}
                <div className="mb-6">
                  <label htmlFor="title" className="block text-sm font-medium text-gray-700 mb-2">
                    Titre de votre demande <span className="text-red-500">*</span>
                    <span className={`ml-2 text-xs font-medium ${formData.title.length >= 10 ? 'text-green-600' : 'text-orange-600'}`}>
                      {formData.title.length}/10
                    </span>
                  </label>
                  <input
                    id="title"
                    name="title"
                    type="text"
                    required
                    value={formData.title}
                    onChange={handleInputChange}
                    className={`${inputClass('title')} ${fieldErrors.title ? 'error-field' : ''}`}
                    data-error={!!fieldErrors.title}
                    placeholder="Ex: Question sur visa de travail au Canada"
                  />
                  {fieldErrors.title && (
                    <p className="mt-2 text-sm text-red-600 flex items-center">
                      <AlertCircle size={16} className="mr-1 flex-shrink-0" />
                      {fieldErrors.title}
                    </p>
                  )}
                </div>

                {/* Description */}
                <div>
                  <label htmlFor="description" className="block text-sm font-medium text-gray-700 mb-2">
                    Description d√©taill√©e <span className="text-red-500">*</span>
                    <span className={`ml-2 text-xs font-medium ${formData.description.length >= 50 ? 'text-green-600' : 'text-orange-600'}`}>
                      {formData.description.length}/50
                    </span>
                    <span className="text-gray-500 text-xs ml-2">
                      üí° Plus c'est d√©taill√©, meilleure sera la r√©ponse !
                    </span>
                  </label>
                  <textarea
                    id="description"
                    name="description"
                    rows={4}
                    required
                    value={formData.description}
                    onChange={handleInputChange}
                    className={`resize-none ${inputClass('description')} ${fieldErrors.description ? 'error-field' : ''}`}
                    data-error={!!fieldErrors.description}
                    placeholder="D√©crivez votre situation en d√©tail : contexte, questions sp√©cifiques, objectifs, d√©lais, contraintes particuli√®res..."
                  />
                  {fieldErrors.description && (
                    <p className="mt-2 text-sm text-red-600 flex items-center">
                      <AlertCircle size={16} className="mr-1 flex-shrink-0" />
                      {fieldErrors.description}
                    </p>
                  )}
                </div>
              </div>

              {/* Section Langues */}
              <div className="bg-gradient-to-r from-red-50 to-pink-50 rounded-xl p-4 sm:p-6 border border-red-100">
                <h3 className="text-lg font-semibold text-gray-900 mb-4 flex items-center">
                  üó£Ô∏è Langues de communication
                </h3>
                
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-3">
                    Langues que vous parlez <span className="text-red-500">*</span>
                  </label>
                  <div className={`${fieldErrors.languages ? 'error-field' : ''}`} data-error={!!fieldErrors.languages}>
                    {/* üîß FIX: Passage de la langue du contexte au composant */}
                    <MultiLanguageSelect
                      value={languagesSpoken.map(lang => ({ value: lang.code, label: lang.name }))}
                      onChange={(selectedOptions) => {
                        const selectedLangs = selectedOptions
                          .map(option => languages.find(lang => lang.code === option.value))
                          .filter(Boolean) as Language[];
                        setLanguagesSpoken(selectedLangs);
                      }}
                      providerLanguages={provider?.languages || provider?.languagesSpoken || []}
                      highlightShared={true}
                      locale={language} // üîß FIX: Passage de la langue du contexte
                      showLanguageToggle={false} // Masqu√© car la langue vient du header
                    />
                  </div>
                  {fieldErrors.languages && (
                    <p className="mt-2 text-sm text-red-600 flex items-center">
                      <AlertCircle size={16} className="mr-1 flex-shrink-0" />
                      {fieldErrors.languages}
                    </p>
                  )}

                  {/* Affichage des langues s√©lectionn√©es avec s√©paration */}
                  {languagesSpoken.length > 0 && (
                    <div className="mt-4 space-y-3">
                      {/* Langues compatibles */}
                      {(() => {
                        const providerLanguages = provider?.languages || provider?.languagesSpoken || [];
                        const compatibleLangs = languagesSpoken.filter(lang => 
                          providerLanguages.includes(lang.code)
                        );
                        const incompatibleLangs = languagesSpoken.filter(lang => 
                          !providerLanguages.includes(lang.code)
                        );

                        return (
                          <>
                            {compatibleLangs.length > 0 && (
                              <div className="p-4 bg-green-50 border-l-4 border-green-400 rounded-lg">
                                <div className="flex">
                                  <CheckCircle className="h-5 w-5 text-green-400 mt-0.5 flex-shrink-0" />
                                  <div className="ml-3">
                                    <p className="text-green-700 font-medium mb-2">
                                      ‚úÖ Langues compatibles avec le prestataire :
                                    </p>
                                    <div className="flex flex-wrap gap-2">
                                      {compatibleLangs.map((lang) => (
                                        <span
                                          key={lang.code}
                                          className="inline-flex items-center px-3 py-1 bg-green-100 text-green-800 text-sm rounded-full border border-green-200"
                                        >
                                          üåê {lang.name}
                                        </span>
                                      ))}
                                    </div>
                                  </div>
                                </div>
                              </div>
                            )}

                            {incompatibleLangs.length > 0 && (
                              <div className="p-4 bg-red-50 border-l-4 border-red-400 rounded-lg">
                                <div className="flex">
                                  <AlertCircle className="h-5 w-5 text-red-400 mt-0.5 flex-shrink-0" />
                                  <div className="ml-3">
                                    <p className="text-red-700 font-medium mb-2">
                                      ‚ö†Ô∏è Langues non compatibles :
                                    </p>
                                    <div className="flex flex-wrap gap-2">
                                      {incompatibleLangs.map((lang) => (
                                        <span
                                          key={lang.code}
                                          className="inline-flex items-center px-3 py-1 bg-red-100 text-red-800 text-sm rounded-full border border-red-200"
                                        >
                                          üåê {lang.name}
                                        </span>
                                      ))}
                                    </div>
                                  </div>
                                </div>
                              </div>
                            )}
                          </>
                        );
                      })()}
                    </div>
                  )}

                  {/* Message global de compatibilit√© */}
                  {languagesSpoken.length > 0 && !hasLanguageMatchRealTime && (
                    <div className="mt-4 p-4 bg-red-50 border-l-4 border-red-400 rounded-lg">
                      <div className="flex">
                        <AlertCircle className="h-5 w-5 text-red-400 mt-0.5 flex-shrink-0" />
                        <div className="ml-3">
                          <p className="text-red-700 font-medium">
                            üö´ Communication impossible
                          </p>
                          <p className="text-red-600 text-sm mt-1">
                            Vous devez s√©lectionner au moins une langue que le prestataire parle pour pouvoir continuer.
                          </p>
                        </div>
                      </div>
                    </div>
                  )}
                </div>
              </div>

              {/* Section Contact */}
              <div className="bg-gradient-to-r from-orange-50 to-red-50 rounded-xl p-4 sm:p-6 border border-orange-100">
                <h3 className="text-lg font-semibold text-gray-900 mb-4 flex items-center">
                  üì± Informations de contact
                </h3>

                {/* Num√©ro de t√©l√©phone */}
                <div className="mb-6">
                  <label htmlFor="phoneNumber" className="block text-sm font-medium text-gray-700 mb-2">
                    <Phone size={16} className="inline mr-1" />
                    Num√©ro de t√©l√©phone <span className="text-red-500">*</span>
                  </label>
                  <div className="flex space-x-2">
                    <select
                      id="phoneCountryCode"
                      name="phoneCountryCode"
                      value={formData.phoneCountryCode}
                      onChange={handleInputChange}
                      className={`${inputClass('phoneNumber')} w-20 sm:w-24 text-sm`}
                    >
                      {countryCodeOptions.map(({ code, flag }) => (
                        <option key={code} value={code}>
                          {flag} {code}
                        </option>
                      ))}
                    </select>
                    <input
                      id="phoneNumber"
                      name="phoneNumber"
                      type="tel"
                      required
                      value={formData.phoneNumber}
                      onChange={handleInputChange}
                      className={`flex-1 ${inputClass('phoneNumber')} ${fieldErrors.phoneNumber ? 'error-field' : ''}`}
                      data-error={!!fieldErrors.phoneNumber}
                      placeholder="612 345 678"
                      maxLength={20}
                    />
                  </div>
                  {fieldErrors.phoneNumber && (
                    <p className="mt-2 text-sm text-red-600 flex items-center">
                      <AlertCircle size={16} className="mr-1 flex-shrink-0" />
                      {fieldErrors.phoneNumber}
                    </p>
                  )}
                  <div className="mt-2 text-sm text-gray-600">
                    ‚è±Ô∏è <strong>Important :</strong> Vous serez appel√©(e) dans les 5 minutes apr√®s paiement
                  </div>
                </div>

                {/* WhatsApp */}
                <div>
                  <label htmlFor="whatsappNumber" className="block text-sm font-medium text-gray-700 mb-2">
                    <MessageCircle size={16} className="inline mr-1" />
                    Num√©ro WhatsApp (optionnel)
                  </label>
                  <div className="flex space-x-2">
                    <select
                      id="whatsappCountryCode"
                      name="whatsappCountryCode"
                      value={formData.whatsappCountryCode}
                      onChange={handleInputChange}
                      className={`${inputClass('whatsappNumber')} w-20 sm:w-24 text-sm`}
                    >
                      {countryCodeOptions.map(({ code, flag }) => (
                        <option key={code} value={code}>
                          {flag} {code}
                        </option>
                      ))}
                    </select>
                    <input
                      id="whatsappNumber"
                      name="whatsappNumber"
                      type="tel"
                      value={formData.whatsappNumber}
                      onChange={handleInputChange}
                      className={`flex-1 ${inputClass('whatsappNumber')}`}
                      placeholder="612 345 678"
                      maxLength={20}
                    />
                  </div>
                  <div className="mt-2 text-sm text-gray-600">
                    üí¨ Pour recevoir les mises √† jour en temps r√©el
                  </div>
                </div>
              </div>

              {/* CGU */}
              <div className="bg-gray-50 rounded-xl p-4 sm:p-6 border border-gray-200">
                <div className="flex items-start space-x-3">
                  <input
                    id="acceptTerms"
                    name="acceptTerms"
                    type="checkbox"
                    checked={formData.acceptTerms}
                    onChange={handleInputChange}
                    className="h-5 w-5 mt-0.5 rounded border-gray-300 text-blue-600 focus:ring-blue-500 flex-shrink-0"
                    required
                  />
                  <label htmlFor="acceptTerms" className="text-sm text-gray-700 leading-relaxed">
                    J'accepte les <Link to="/cgu-clients" className="text-blue-600 hover:text-blue-700 underline font-medium">conditions g√©n√©rales d'utilisation</Link> et confirme que les informations fournies sont exactes. <span className="text-red-500">*</span>
                  </label>
                </div>
              </div>

              {/* R√©capitulatif consultation */}
              <div className="bg-gradient-to-r from-blue-600 to-purple-600 rounded-xl p-4 sm:p-6 text-white">
                <div className="flex items-start space-x-4">
                  <Shield className="w-6 h-6 sm:w-8 sm:h-8 text-blue-200 mt-1 flex-shrink-0" />
                  <div>
                    <h4 className="font-bold text-lg mb-3">
                      üöÄ R√©capitulatif de votre consultation
                    </h4>
                    <div className="grid grid-cols-1 sm:grid-cols-2 gap-4 text-sm">
                      <div className="space-y-2">
                        <div className="flex items-center">
                          <span className="font-medium">‚è±Ô∏è Dur√©e :</span>
                          <span className="ml-2">{provider?.duration || '--'} minutes</span>
                        </div>
                        <div className="flex items-center">
                          <span className="font-medium">üí∞ Prix :</span>
                          {/* üîß FIX: Correction de l'affichage du prix dans le r√©capitulatif */}
                          <span className="ml-2 text-xl font-bold">{provider?.price ? provider.price.toFixed(2) : '--'}‚Ç¨</span>
                        </div>
                      </div>
                      <div className="space-y-2">
                        <div className="flex items-center">
                          <span className="font-medium">üìû Appel :</span>
                          <span className="ml-2">Dans les 5 minutes</span>
                        </div>
                        <div className="flex items-center">
                          <span className="font-medium">üîí Paiement :</span>
                          <span className="ml-2">100% s√©curis√©</span>
                        </div>
                      </div>
                    </div>
                    <div className="mt-4 p-3 bg-white/10 rounded-lg">
                      <p className="text-sm">
                        <strong>üíØ Garantie satisfait ou rembours√© :</strong> Si l'expert n'est pas disponible, vous √™tes automatiquement rembours√©.
                      </p>
                    </div>
                  </div>
                </div>
              </div>

              {/* Submit Button */}
              <div className="pt-6">
                <Button
                  type="submit"
                  loading={isLoading}
                  fullWidth
                  size="large"
                  className={`
                    ${isFormValid 
                      ? 'bg-gradient-to-r from-green-500 to-blue-600 hover:from-green-600 hover:to-blue-700 transform hover:scale-[1.02] shadow-lg hover:shadow-xl' 
                      : 'bg-gray-400 cursor-not-allowed'
                    } 
                    text-white font-bold py-4 px-6 sm:px-8 rounded-xl transition-all duration-300 ease-out text-base sm:text-lg
                  `}
                  disabled={!isFormValid || isLoading}
                >
                  {isLoading ? (
                    <div className="flex items-center justify-center">
                      <div className="animate-spin rounded-full h-6 w-6 border-b-2 border-white mr-3"></div>
                      Traitement en cours...
                    </div>
                  ) : (
                    <div className="flex items-center justify-center">
                      <Euro size={20} className="mr-2 sm:mr-3" />
                      <span>
                        {/* üîß FIX: Correction de l'affichage du prix dans le bouton */}
                        {isFormValid 
                          ? `Continuer vers le paiement (${provider?.price ? provider.price.toFixed(2) : '--'}‚Ç¨)` 
                          : `Veuillez compl√©ter le formulaire (${formProgress}%)`
                        }
                      </span>
                    </div>
                  )}
                </Button>

                {/* Debug info pour comprendre pourquoi le bouton est d√©sactiv√© */}
                {!isFormValid && (
                  <div className="mt-4 p-4 bg-yellow-50 border border-yellow-200 rounded-lg">
                    <p className="text-yellow-800 text-sm font-medium mb-2">
                      üîç √âl√©ments manquants pour activer le bouton :
                    </p>
                    <div className="grid grid-cols-1 gap-1 text-xs text-yellow-700">
                      {formData.firstName.trim().length === 0 && <div>‚Ä¢ Pr√©nom requis</div>}
                      {formData.lastName.trim().length === 0 && <div>‚Ä¢ Nom requis</div>}
                      {formData.title.trim().length < 10 && <div>‚Ä¢ Titre trop court (min. 10 car.)</div>}
                      {formData.description.trim().length < 50 && <div>‚Ä¢ Description trop courte (min. 50 car.)</div>}
                      {formData.phoneNumber.trim().length < 6 && <div>‚Ä¢ Num√©ro de t√©l√©phone invalide</div>}
                      {formData.nationality.trim().length === 0 && <div>‚Ä¢ Nationalit√© requise</div>}
                      {formData.currentCountry.trim().length === 0 && <div>‚Ä¢ Pays d'intervention requis</div>}
                      {formData.currentCountry === 'Autre' && formData.autrePays.trim().length === 0 && <div>‚Ä¢ Pr√©cisez votre pays</div>}
                      {languagesSpoken.length === 0 && <div>‚Ä¢ Aucune langue s√©lectionn√©e</div>}
                      {!formData.acceptTerms && <div>‚Ä¢ Conditions non accept√©es</div>}
                      {!hasLanguageMatchRealTime && <div>‚Ä¢ Aucune langue en commun avec le prestataire</div>}
                    </div>
                  </div>
                )}
              </div>

              <div className="text-center pt-4">
                <p className="text-xs text-gray-500">
                  üîí En continuant, vous acceptez nos conditions g√©n√©rales de vente ‚Ä¢ Paiement 100% s√©curis√©
                </p>
              </div>
            </form>
          </div>
        </div>
      </div>
    </Layout>
  );
};

export default BookingRequest;